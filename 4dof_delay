from __future__ import division #Python 2
from gpiozero import MCP3008, Servo, Button
from gpiozero.tools import scaled
from itertools import cycle
from signal import pause
from time import sleep

class ServoRecorder(object):
    def __init__(self):
        self.recording = None
        self.record_button = Button(21)
        self.record_button.when_pressed = self.start_recording
        self.record_button.when_released = self.stop_recording
        self.servo1 = Servo(16, min_pulse_width=1/1000, max_pulse_width=2/1000)
        self.servo2 = Servo(19, min_pulse_width=1/1000, max_pulse_width=2/1000)
        self.servo3 = Servo(20, min_pulse_width=1/1000, max_pulse_width=2/1000)
        self.servo4 = Servo(26, min_pulse_width=1/1000, max_pulse_width=2/1000)
        self.servo1.source_delay = 1/100 # read up to 100 values/s
        self.servo2.source_delay = 1/100 # read up to 100 values/s
        self.servo3.source_delay = 1/100 # read up to 100 values/s
        self.servo4.source_delay = 1/100 # read up to 100 values/s
        self.pot1 = MCP3008(channel=0)
        self.pot2 = MCP3008(channel=1)
        self.pot3 = MCP3008(channel=2)
        self.pot4 = MCP3008(channel=3)

    def record(self, values):
        self.recording = []
        for value in values:
            self.recording.append(value)
            yield value

    def start_recording(self):
        print('Recording')
        self.servo1.source = self.record(scaled(self.pot1.values, -1, 1))
        self.servo2.source = self.record(scaled(self.pot2.values, -1, 1))
        self.servo3.source = self.record(scaled(self.pot3.values, -1, 1))
        self.servo4.source = self.record(scaled(self.pot4.values, -1, 1))

    def stop_recording(self):
        print('Playing back %d values' % len(self.recording))
        self.servo1.source = cycle(self.recording)
        self.servo2.source = cycle(self.recording)
        self.servo3.source = cycle(self.recording)
        self.servo4.source = cycle(self.recording)


recorder = ServoRecorder()
pause()
